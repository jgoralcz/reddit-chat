name: Deploy
on:
  push:
    branches: [master, dev]
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Extract Environment
        shell: bash
        run: echo "##[set-output name=env;]$([ "${GITHUB_REF##*/}" == "master" ] && echo "prod" || echo "beta")"
        id: extract_environment

      - name: Extract Repo Name
        shell: bash
        run: echo "##[set-output name=repo;]$(echo ${GITHUB_REPOSITORY##*/})"
        id: extract_repo

      - name: Build Host URL
        shell: bash
        run: echo "##[set-output name=url;]$([ "${GITHUB_REF##*/}" == "master" ] && echo ${{ secrets.HOST_URL }} || echo "beta-${{ secrets.HOST_URL }}")"
        id: extract_host_url

      - name: Push to GitHub Packages
        uses: docker/build-push-action@v1
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: docker.pkg.github.com
          repository: ${{ github.actor }}/${{ steps.extract_repo.outputs.repo }}/${{ steps.extract_repo.outputs.repo }}
          tags: ${{ steps.extract_environment.outputs.env }}

      - name: Setup kubectl
        shell: bash
        run: |
          mkdir -p ${{ env.KUBECONFIG_FOLDER }} \
            && echo "${{ secrets.KUBECONFIG}}" | base64 -d > ${{ env.KUBECONFIG_FOLDER }}/config
        env:
          KUBECONFIG_FOLDER: ~/.kube

      - name: Deploy to Kubernetes
        shell: bash
        run: |
          kubectl -n ${{ secrets.NAMESPACE }} set image deployment/${SERVICE_NAME} ${SERVICE_NAME}=${IMAGE_LOCATION} || echo "$SERVICE_NAME deployment not found"\
          && envsubst < k8s/ingress.yml | kubectl apply -f - \
          && envsubst < k8s/service.yml | kubectl apply -f - \
          && envsubst < k8s/deployment.yml | kubectl apply -f - \
          && kubectl -n ${{ secrets.NAMESPACE }} rollout restart deployment/${SERVICE_NAME}
        env:
          ENV: ${{ steps.extract_environment.outputs.env }}
          IMAGE_LOCATION: docker.pkg.github.com/jgoralcz/${{ steps.extract_repo.outputs.repo }}/${{ steps.extract_repo.outputs.repo }}:${{ steps.extract_environment.outputs.env }}
          SERVICE_NAME: ${{ steps.extract_repo.outputs.repo }}
          PORT: 8443
          HOST_URL: ${{ steps.extract_host_url.outputs.url }}

      - name: Deploy HOST_URL to Cloudflare
        shell: bash
        run: |
          curl -X PUT "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/dns_records/$HOST_URL" \
          -H "X-Auth-Email: ${{ secrets.CLOUDFLARE_EMAIL }}" \
          -H "X-Auth-Key: "${{ secrets.CLOUDFLARE_TOKEN}}" \
          -H "Content-Type: application/json" \
          --data '{"type":"A","name":"$HOST_URL","content":"${{ secrets.HA_PROXY_IP }}","ttl":1,"proxied":true}' || ( \

            DNS_RECORD_ID=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/dns_records?type=A&name=$HOST_URL" \
            -H "X-Auth-Email: ${{ secrets.CLOUDFLARE_EMAIL }}" \
            -H "X-Auth-Key: "${{ secrets.CLOUDFLARE_TOKEN}}" \
            -H "Content-Type: application/json" | jq -r '{"result"}[] | .[0] | .id') && \
            
            curl -s -X --fail PUT "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID}}/dns_records/$DNS_RECORD_ID" \
            -H "X-Auth-Email: ${{ secrets.CLOUDFLARE_EMAIL }}" \
            -H "X-Auth-Key: "${{ secrets.CLOUDFLARE_TOKEN}}" \
            -H "Content-Type: application/json" \
            --data '{"type":"A","name":"$HOST_URL","content":"${{ secrets.HA_PROXY_IP }}","ttl":1,"proxied":true}' || echo "Failed updating dns record" \
          )
        env:
          HOST_URL: ${{ steps.extract_host_url.outputs.url }}
